// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v6.30.1
// source: proto/analysis.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnalysisRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileContent   []byte                 `protobuf:"bytes,1,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
	FileName      string                 `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalysisRequest) Reset() {
	*x = AnalysisRequest{}
	mi := &file_proto_analysis_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalysisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisRequest) ProtoMessage() {}

func (x *AnalysisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisRequest.ProtoReflect.Descriptor instead.
func (*AnalysisRequest) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{0}
}

func (x *AnalysisRequest) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

func (x *AnalysisRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type AnalysisResponse struct {
	state               protoimpl.MessageState      `protogen:"open.v1"`
	Descriptives        []*DescriptiveStatistics    `protobuf:"bytes,1,rep,name=descriptives,proto3" json:"descriptives,omitempty"`
	NormalityTests      []*NormalityTestResult      `protobuf:"bytes,2,rep,name=normality_tests,json=normalityTests,proto3" json:"normality_tests,omitempty"`
	ConfidenceIntervals []*ConfidenceInterval       `protobuf:"bytes,3,rep,name=confidence_intervals,json=confidenceIntervals,proto3" json:"confidence_intervals,omitempty"`
	HypothesisTests     []*HypothesisTestResult     `protobuf:"bytes,4,rep,name=hypothesis_tests,json=hypothesisTests,proto3" json:"hypothesis_tests,omitempty"`
	ChiSquareTest       *PearsonChiSquareTestResult `protobuf:"bytes,5,opt,name=chi_square_test,json=chiSquareTest,proto3" json:"chi_square_test,omitempty"`
	Correlation         *CorrelationResult          `protobuf:"bytes,6,opt,name=correlation,proto3" json:"correlation,omitempty"`
	Regression          *RegressionResult           `protobuf:"bytes,7,opt,name=regression,proto3" json:"regression,omitempty"`
	BinomialEstimate    *BinomialEstimate           `protobuf:"bytes,8,opt,name=binomial_estimate,json=binomialEstimate,proto3" json:"binomial_estimate,omitempty"`
	ProcessingLog       []string                    `protobuf:"bytes,9,rep,name=processing_log,json=processingLog,proto3" json:"processing_log,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AnalysisResponse) Reset() {
	*x = AnalysisResponse{}
	mi := &file_proto_analysis_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalysisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisResponse) ProtoMessage() {}

func (x *AnalysisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisResponse.ProtoReflect.Descriptor instead.
func (*AnalysisResponse) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{1}
}

func (x *AnalysisResponse) GetDescriptives() []*DescriptiveStatistics {
	if x != nil {
		return x.Descriptives
	}
	return nil
}

func (x *AnalysisResponse) GetNormalityTests() []*NormalityTestResult {
	if x != nil {
		return x.NormalityTests
	}
	return nil
}

func (x *AnalysisResponse) GetConfidenceIntervals() []*ConfidenceInterval {
	if x != nil {
		return x.ConfidenceIntervals
	}
	return nil
}

func (x *AnalysisResponse) GetHypothesisTests() []*HypothesisTestResult {
	if x != nil {
		return x.HypothesisTests
	}
	return nil
}

func (x *AnalysisResponse) GetChiSquareTest() *PearsonChiSquareTestResult {
	if x != nil {
		return x.ChiSquareTest
	}
	return nil
}

func (x *AnalysisResponse) GetCorrelation() *CorrelationResult {
	if x != nil {
		return x.Correlation
	}
	return nil
}

func (x *AnalysisResponse) GetRegression() *RegressionResult {
	if x != nil {
		return x.Regression
	}
	return nil
}

func (x *AnalysisResponse) GetBinomialEstimate() *BinomialEstimate {
	if x != nil {
		return x.BinomialEstimate
	}
	return nil
}

func (x *AnalysisResponse) GetProcessingLog() []string {
	if x != nil {
		return x.ProcessingLog
	}
	return nil
}

type DescriptiveStatistics struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	VariableName         string                 `protobuf:"bytes,1,opt,name=variable_name,json=variableName,proto3" json:"variable_name,omitempty"`
	Count                int64                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Mean                 float64                `protobuf:"fixed64,3,opt,name=mean,proto3" json:"mean,omitempty"`
	Median               float64                `protobuf:"fixed64,4,opt,name=median,proto3" json:"median,omitempty"`
	Mode                 []float64              `protobuf:"fixed64,5,rep,packed,name=mode,proto3" json:"mode,omitempty"`
	Variance             float64                `protobuf:"fixed64,6,opt,name=variance,proto3" json:"variance,omitempty"`
	StdDev               float64                `protobuf:"fixed64,7,opt,name=std_dev,json=stdDev,proto3" json:"std_dev,omitempty"`
	VariationCoefficient float64                `protobuf:"fixed64,8,opt,name=variation_coefficient,json=variationCoefficient,proto3" json:"variation_coefficient,omitempty"`
	Skewness             float64                `protobuf:"fixed64,9,opt,name=skewness,proto3" json:"skewness,omitempty"`
	Kurtosis             float64                `protobuf:"fixed64,10,opt,name=kurtosis,proto3" json:"kurtosis,omitempty"`
	MinValue             float64                `protobuf:"fixed64,11,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue             float64                `protobuf:"fixed64,12,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *DescriptiveStatistics) Reset() {
	*x = DescriptiveStatistics{}
	mi := &file_proto_analysis_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescriptiveStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescriptiveStatistics) ProtoMessage() {}

func (x *DescriptiveStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescriptiveStatistics.ProtoReflect.Descriptor instead.
func (*DescriptiveStatistics) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{2}
}

func (x *DescriptiveStatistics) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

func (x *DescriptiveStatistics) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DescriptiveStatistics) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *DescriptiveStatistics) GetMedian() float64 {
	if x != nil {
		return x.Median
	}
	return 0
}

func (x *DescriptiveStatistics) GetMode() []float64 {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *DescriptiveStatistics) GetVariance() float64 {
	if x != nil {
		return x.Variance
	}
	return 0
}

func (x *DescriptiveStatistics) GetStdDev() float64 {
	if x != nil {
		return x.StdDev
	}
	return 0
}

func (x *DescriptiveStatistics) GetVariationCoefficient() float64 {
	if x != nil {
		return x.VariationCoefficient
	}
	return 0
}

func (x *DescriptiveStatistics) GetSkewness() float64 {
	if x != nil {
		return x.Skewness
	}
	return 0
}

func (x *DescriptiveStatistics) GetKurtosis() float64 {
	if x != nil {
		return x.Kurtosis
	}
	return 0
}

func (x *DescriptiveStatistics) GetMinValue() float64 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *DescriptiveStatistics) GetMaxValue() float64 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

type NormalityTestResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VariableName  string                 `protobuf:"bytes,1,opt,name=variable_name,json=variableName,proto3" json:"variable_name,omitempty"`
	TestName      string                 `protobuf:"bytes,2,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	Statistic     float64                `protobuf:"fixed64,3,opt,name=statistic,proto3" json:"statistic,omitempty"`
	PValue        float64                `protobuf:"fixed64,4,opt,name=p_value,json=pValue,proto3" json:"p_value,omitempty"`
	Conclusion    string                 `protobuf:"bytes,5,opt,name=conclusion,proto3" json:"conclusion,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NormalityTestResult) Reset() {
	*x = NormalityTestResult{}
	mi := &file_proto_analysis_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NormalityTestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalityTestResult) ProtoMessage() {}

func (x *NormalityTestResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalityTestResult.ProtoReflect.Descriptor instead.
func (*NormalityTestResult) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{3}
}

func (x *NormalityTestResult) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

func (x *NormalityTestResult) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *NormalityTestResult) GetStatistic() float64 {
	if x != nil {
		return x.Statistic
	}
	return 0
}

func (x *NormalityTestResult) GetPValue() float64 {
	if x != nil {
		return x.PValue
	}
	return 0
}

func (x *NormalityTestResult) GetConclusion() string {
	if x != nil {
		return x.Conclusion
	}
	return ""
}

type ConfidenceInterval struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	VariableName    string                 `protobuf:"bytes,1,opt,name=variable_name,json=variableName,proto3" json:"variable_name,omitempty"`
	ParameterName   string                 `protobuf:"bytes,2,opt,name=parameter_name,json=parameterName,proto3" json:"parameter_name,omitempty"`
	LowerBound      float64                `protobuf:"fixed64,3,opt,name=lower_bound,json=lowerBound,proto3" json:"lower_bound,omitempty"`
	UpperBound      float64                `protobuf:"fixed64,4,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
	ConfidenceLevel float64                `protobuf:"fixed64,5,opt,name=confidence_level,json=confidenceLevel,proto3" json:"confidence_level,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ConfidenceInterval) Reset() {
	*x = ConfidenceInterval{}
	mi := &file_proto_analysis_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfidenceInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfidenceInterval) ProtoMessage() {}

func (x *ConfidenceInterval) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfidenceInterval.ProtoReflect.Descriptor instead.
func (*ConfidenceInterval) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{4}
}

func (x *ConfidenceInterval) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

func (x *ConfidenceInterval) GetParameterName() string {
	if x != nil {
		return x.ParameterName
	}
	return ""
}

func (x *ConfidenceInterval) GetLowerBound() float64 {
	if x != nil {
		return x.LowerBound
	}
	return 0
}

func (x *ConfidenceInterval) GetUpperBound() float64 {
	if x != nil {
		return x.UpperBound
	}
	return 0
}

func (x *ConfidenceInterval) GetConfidenceLevel() float64 {
	if x != nil {
		return x.ConfidenceLevel
	}
	return 0
}

type HypothesisTestResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TestName      string                 `protobuf:"bytes,1,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Statistic     float64                `protobuf:"fixed64,3,opt,name=statistic,proto3" json:"statistic,omitempty"`
	PValue        float64                `protobuf:"fixed64,4,opt,name=p_value,json=pValue,proto3" json:"p_value,omitempty"`
	Conclusion    string                 `protobuf:"bytes,5,opt,name=conclusion,proto3" json:"conclusion,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HypothesisTestResult) Reset() {
	*x = HypothesisTestResult{}
	mi := &file_proto_analysis_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HypothesisTestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HypothesisTestResult) ProtoMessage() {}

func (x *HypothesisTestResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HypothesisTestResult.ProtoReflect.Descriptor instead.
func (*HypothesisTestResult) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{5}
}

func (x *HypothesisTestResult) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *HypothesisTestResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HypothesisTestResult) GetStatistic() float64 {
	if x != nil {
		return x.Statistic
	}
	return 0
}

func (x *HypothesisTestResult) GetPValue() float64 {
	if x != nil {
		return x.PValue
	}
	return 0
}

func (x *HypothesisTestResult) GetConclusion() string {
	if x != nil {
		return x.Conclusion
	}
	return ""
}

type PearsonChiSquareTestResult struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Description      string                 `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Statistic        float64                `protobuf:"fixed64,2,opt,name=statistic,proto3" json:"statistic,omitempty"`
	DegreesOfFreedom int32                  `protobuf:"varint,3,opt,name=degrees_of_freedom,json=degreesOfFreedom,proto3" json:"degrees_of_freedom,omitempty"`
	PValue           float64                `protobuf:"fixed64,4,opt,name=p_value,json=pValue,proto3" json:"p_value,omitempty"`
	Conclusion       string                 `protobuf:"bytes,5,opt,name=conclusion,proto3" json:"conclusion,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PearsonChiSquareTestResult) Reset() {
	*x = PearsonChiSquareTestResult{}
	mi := &file_proto_analysis_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PearsonChiSquareTestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PearsonChiSquareTestResult) ProtoMessage() {}

func (x *PearsonChiSquareTestResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PearsonChiSquareTestResult.ProtoReflect.Descriptor instead.
func (*PearsonChiSquareTestResult) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{6}
}

func (x *PearsonChiSquareTestResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PearsonChiSquareTestResult) GetStatistic() float64 {
	if x != nil {
		return x.Statistic
	}
	return 0
}

func (x *PearsonChiSquareTestResult) GetDegreesOfFreedom() int32 {
	if x != nil {
		return x.DegreesOfFreedom
	}
	return 0
}

func (x *PearsonChiSquareTestResult) GetPValue() float64 {
	if x != nil {
		return x.PValue
	}
	return 0
}

func (x *PearsonChiSquareTestResult) GetConclusion() string {
	if x != nil {
		return x.Conclusion
	}
	return ""
}

type CorrelationResult struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Pearson       []*CorrelationResult_PearsonCorrelation  `protobuf:"bytes,1,rep,name=pearson,proto3" json:"pearson,omitempty"`
	Spearman      []*CorrelationResult_SpearmanCorrelation `protobuf:"bytes,2,rep,name=spearman,proto3" json:"spearman,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CorrelationResult) Reset() {
	*x = CorrelationResult{}
	mi := &file_proto_analysis_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CorrelationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrelationResult) ProtoMessage() {}

func (x *CorrelationResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrelationResult.ProtoReflect.Descriptor instead.
func (*CorrelationResult) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{7}
}

func (x *CorrelationResult) GetPearson() []*CorrelationResult_PearsonCorrelation {
	if x != nil {
		return x.Pearson
	}
	return nil
}

func (x *CorrelationResult) GetSpearman() []*CorrelationResult_SpearmanCorrelation {
	if x != nil {
		return x.Spearman
	}
	return nil
}

type RegressionResult struct {
	state                protoimpl.MessageState          `protogen:"open.v1"`
	ModelType            string                          `protobuf:"bytes,1,opt,name=model_type,json=modelType,proto3" json:"model_type,omitempty"`
	DependentVariable    string                          `protobuf:"bytes,2,opt,name=dependent_variable,json=dependentVariable,proto3" json:"dependent_variable,omitempty"`
	IndependentVariables []string                        `protobuf:"bytes,3,rep,name=independent_variables,json=independentVariables,proto3" json:"independent_variables,omitempty"`
	RSquared             float64                         `protobuf:"fixed64,4,opt,name=r_squared,json=rSquared,proto3" json:"r_squared,omitempty"`
	AdjustedRSquared     float64                         `protobuf:"fixed64,5,opt,name=adjusted_r_squared,json=adjustedRSquared,proto3" json:"adjusted_r_squared,omitempty"`
	FStatistic           float64                         `protobuf:"fixed64,6,opt,name=f_statistic,json=fStatistic,proto3" json:"f_statistic,omitempty"`
	FPValue              float64                         `protobuf:"fixed64,7,opt,name=f_p_value,json=fPValue,proto3" json:"f_p_value,omitempty"`
	Coefficients         []*RegressionResult_Coefficient `protobuf:"bytes,8,rep,name=coefficients,proto3" json:"coefficients,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RegressionResult) Reset() {
	*x = RegressionResult{}
	mi := &file_proto_analysis_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegressionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegressionResult) ProtoMessage() {}

func (x *RegressionResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegressionResult.ProtoReflect.Descriptor instead.
func (*RegressionResult) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{8}
}

func (x *RegressionResult) GetModelType() string {
	if x != nil {
		return x.ModelType
	}
	return ""
}

func (x *RegressionResult) GetDependentVariable() string {
	if x != nil {
		return x.DependentVariable
	}
	return ""
}

func (x *RegressionResult) GetIndependentVariables() []string {
	if x != nil {
		return x.IndependentVariables
	}
	return nil
}

func (x *RegressionResult) GetRSquared() float64 {
	if x != nil {
		return x.RSquared
	}
	return 0
}

func (x *RegressionResult) GetAdjustedRSquared() float64 {
	if x != nil {
		return x.AdjustedRSquared
	}
	return 0
}

func (x *RegressionResult) GetFStatistic() float64 {
	if x != nil {
		return x.FStatistic
	}
	return 0
}

func (x *RegressionResult) GetFPValue() float64 {
	if x != nil {
		return x.FPValue
	}
	return 0
}

func (x *RegressionResult) GetCoefficients() []*RegressionResult_Coefficient {
	if x != nil {
		return x.Coefficients
	}
	return nil
}

type BinomialEstimate struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	VariableName        string                 `protobuf:"bytes,1,opt,name=variable_name,json=variableName,proto3" json:"variable_name,omitempty"`
	TotalTrials         int64                  `protobuf:"varint,2,opt,name=total_trials,json=totalTrials,proto3" json:"total_trials,omitempty"`
	Successes           int64                  `protobuf:"varint,3,opt,name=successes,proto3" json:"successes,omitempty"`
	ProbabilityEstimate float64                `protobuf:"fixed64,4,opt,name=probability_estimate,json=probabilityEstimate,proto3" json:"probability_estimate,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *BinomialEstimate) Reset() {
	*x = BinomialEstimate{}
	mi := &file_proto_analysis_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BinomialEstimate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinomialEstimate) ProtoMessage() {}

func (x *BinomialEstimate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinomialEstimate.ProtoReflect.Descriptor instead.
func (*BinomialEstimate) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{9}
}

func (x *BinomialEstimate) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

func (x *BinomialEstimate) GetTotalTrials() int64 {
	if x != nil {
		return x.TotalTrials
	}
	return 0
}

func (x *BinomialEstimate) GetSuccesses() int64 {
	if x != nil {
		return x.Successes
	}
	return 0
}

func (x *BinomialEstimate) GetProbabilityEstimate() float64 {
	if x != nil {
		return x.ProbabilityEstimate
	}
	return 0
}

type CorrelationResult_PearsonCorrelation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Variable1     string                 `protobuf:"bytes,1,opt,name=variable1,proto3" json:"variable1,omitempty"`
	Variable2     string                 `protobuf:"bytes,2,opt,name=variable2,proto3" json:"variable2,omitempty"`
	Coefficient   float64                `protobuf:"fixed64,3,opt,name=coefficient,proto3" json:"coefficient,omitempty"`
	PValue        float64                `protobuf:"fixed64,4,opt,name=p_value,json=pValue,proto3" json:"p_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CorrelationResult_PearsonCorrelation) Reset() {
	*x = CorrelationResult_PearsonCorrelation{}
	mi := &file_proto_analysis_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CorrelationResult_PearsonCorrelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrelationResult_PearsonCorrelation) ProtoMessage() {}

func (x *CorrelationResult_PearsonCorrelation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrelationResult_PearsonCorrelation.ProtoReflect.Descriptor instead.
func (*CorrelationResult_PearsonCorrelation) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CorrelationResult_PearsonCorrelation) GetVariable1() string {
	if x != nil {
		return x.Variable1
	}
	return ""
}

func (x *CorrelationResult_PearsonCorrelation) GetVariable2() string {
	if x != nil {
		return x.Variable2
	}
	return ""
}

func (x *CorrelationResult_PearsonCorrelation) GetCoefficient() float64 {
	if x != nil {
		return x.Coefficient
	}
	return 0
}

func (x *CorrelationResult_PearsonCorrelation) GetPValue() float64 {
	if x != nil {
		return x.PValue
	}
	return 0
}

type CorrelationResult_SpearmanCorrelation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Variable1     string                 `protobuf:"bytes,1,opt,name=variable1,proto3" json:"variable1,omitempty"`
	Variable2     string                 `protobuf:"bytes,2,opt,name=variable2,proto3" json:"variable2,omitempty"`
	Coefficient   float64                `protobuf:"fixed64,3,opt,name=coefficient,proto3" json:"coefficient,omitempty"`
	PValue        float64                `protobuf:"fixed64,4,opt,name=p_value,json=pValue,proto3" json:"p_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CorrelationResult_SpearmanCorrelation) Reset() {
	*x = CorrelationResult_SpearmanCorrelation{}
	mi := &file_proto_analysis_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CorrelationResult_SpearmanCorrelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrelationResult_SpearmanCorrelation) ProtoMessage() {}

func (x *CorrelationResult_SpearmanCorrelation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrelationResult_SpearmanCorrelation.ProtoReflect.Descriptor instead.
func (*CorrelationResult_SpearmanCorrelation) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{7, 1}
}

func (x *CorrelationResult_SpearmanCorrelation) GetVariable1() string {
	if x != nil {
		return x.Variable1
	}
	return ""
}

func (x *CorrelationResult_SpearmanCorrelation) GetVariable2() string {
	if x != nil {
		return x.Variable2
	}
	return ""
}

func (x *CorrelationResult_SpearmanCorrelation) GetCoefficient() float64 {
	if x != nil {
		return x.Coefficient
	}
	return 0
}

func (x *CorrelationResult_SpearmanCorrelation) GetPValue() float64 {
	if x != nil {
		return x.PValue
	}
	return 0
}

type RegressionResult_Coefficient struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VariableName  string                 `protobuf:"bytes,1,opt,name=variable_name,json=variableName,proto3" json:"variable_name,omitempty"`
	Estimate      float64                `protobuf:"fixed64,2,opt,name=estimate,proto3" json:"estimate,omitempty"`
	StdError      float64                `protobuf:"fixed64,3,opt,name=std_error,json=stdError,proto3" json:"std_error,omitempty"`
	TStatistic    float64                `protobuf:"fixed64,4,opt,name=t_statistic,json=tStatistic,proto3" json:"t_statistic,omitempty"`
	PValue        float64                `protobuf:"fixed64,5,opt,name=p_value,json=pValue,proto3" json:"p_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegressionResult_Coefficient) Reset() {
	*x = RegressionResult_Coefficient{}
	mi := &file_proto_analysis_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegressionResult_Coefficient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegressionResult_Coefficient) ProtoMessage() {}

func (x *RegressionResult_Coefficient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegressionResult_Coefficient.ProtoReflect.Descriptor instead.
func (*RegressionResult_Coefficient) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{8, 0}
}

func (x *RegressionResult_Coefficient) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

func (x *RegressionResult_Coefficient) GetEstimate() float64 {
	if x != nil {
		return x.Estimate
	}
	return 0
}

func (x *RegressionResult_Coefficient) GetStdError() float64 {
	if x != nil {
		return x.StdError
	}
	return 0
}

func (x *RegressionResult_Coefficient) GetTStatistic() float64 {
	if x != nil {
		return x.TStatistic
	}
	return 0
}

func (x *RegressionResult_Coefficient) GetPValue() float64 {
	if x != nil {
		return x.PValue
	}
	return 0
}

var File_proto_analysis_proto protoreflect.FileDescriptor

var file_proto_analysis_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x22, 0x51, 0x0a, 0x0f, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xf4, 0x04, 0x0a, 0x10, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x0f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x68, 0x79, 0x70, 0x6f, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x48, 0x79, 0x70, 0x6f,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0f, 0x68, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x68, 0x69, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x65, 0x61, 0x72, 0x73, 0x6f, 0x6e, 0x43, 0x68, 0x69,
	0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0d, 0x63, 0x68, 0x69, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x0a, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a,
	0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x11, 0x62, 0x69,
	0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x42, 0x69, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x52, 0x10, 0x62, 0x69, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x67, 0x22, 0xee, 0x02, 0x0a, 0x15, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d,
	0x65, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x64, 0x44, 0x65, 0x76, 0x12, 0x33, 0x0a, 0x15, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x14, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6b, 0x65,
	0x77, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x6b, 0x65,
	0x77, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x75, 0x72, 0x74, 0x6f, 0x73, 0x69,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x72, 0x74, 0x6f, 0x73, 0x69,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x13,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcd, 0x01, 0x0a,
	0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xac, 0x01, 0x0a,
	0x14, 0x48, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc3, 0x01, 0x0a, 0x1a,
	0x50, 0x65, 0x61, 0x72, 0x73, 0x6f, 0x6e, 0x43, 0x68, 0x69, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65,
	0x67, 0x72, 0x65, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x64, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x4f,
	0x66, 0x46, 0x72, 0x65, 0x65, 0x64, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xc7, 0x03, 0x0a, 0x11, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x70, 0x65, 0x61, 0x72, 0x73,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x50, 0x65, 0x61, 0x72, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x70, 0x65, 0x61, 0x72, 0x73, 0x6f,
	0x6e, 0x12, 0x4b, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x61, 0x72, 0x6d, 0x61, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x53, 0x70, 0x65, 0x61, 0x72, 0x6d, 0x61, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x61, 0x72, 0x6d, 0x61, 0x6e, 0x1a, 0x8b,
	0x01, 0x0a, 0x12, 0x50, 0x65, 0x61, 0x72, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x32,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x32, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x8c, 0x01, 0x0a,
	0x13, 0x53, 0x70, 0x65, 0x61, 0x72, 0x6d, 0x61, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x32,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x91, 0x04, 0x0a, 0x10,
	0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x33,
	0x0a, 0x15, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x69,
	0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x5f, 0x73,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x52, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12,
	0x1a, 0x0a, 0x09, 0x66, 0x5f, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x66, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x63,
	0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6f,
	0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x63, 0x6f, 0x65, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xa5, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x64, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xab, 0x01, 0x0a, 0x10, 0x42, 0x69, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x32, 0x57, 0x0a,
	0x0f, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x44, 0x0a, 0x0b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x19, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x17, 0x5a, 0x15, 0x2e, 0x2f, 0x67, 0x6f, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_analysis_proto_rawDescOnce sync.Once
	file_proto_analysis_proto_rawDescData = file_proto_analysis_proto_rawDesc
)

func file_proto_analysis_proto_rawDescGZIP() []byte {
	file_proto_analysis_proto_rawDescOnce.Do(func() {
		file_proto_analysis_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_analysis_proto_rawDescData)
	})
	return file_proto_analysis_proto_rawDescData
}

var file_proto_analysis_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_analysis_proto_goTypes = []any{
	(*AnalysisRequest)(nil),                       // 0: analysis.AnalysisRequest
	(*AnalysisResponse)(nil),                      // 1: analysis.AnalysisResponse
	(*DescriptiveStatistics)(nil),                 // 2: analysis.DescriptiveStatistics
	(*NormalityTestResult)(nil),                   // 3: analysis.NormalityTestResult
	(*ConfidenceInterval)(nil),                    // 4: analysis.ConfidenceInterval
	(*HypothesisTestResult)(nil),                  // 5: analysis.HypothesisTestResult
	(*PearsonChiSquareTestResult)(nil),            // 6: analysis.PearsonChiSquareTestResult
	(*CorrelationResult)(nil),                     // 7: analysis.CorrelationResult
	(*RegressionResult)(nil),                      // 8: analysis.RegressionResult
	(*BinomialEstimate)(nil),                      // 9: analysis.BinomialEstimate
	(*CorrelationResult_PearsonCorrelation)(nil),  // 10: analysis.CorrelationResult.PearsonCorrelation
	(*CorrelationResult_SpearmanCorrelation)(nil), // 11: analysis.CorrelationResult.SpearmanCorrelation
	(*RegressionResult_Coefficient)(nil),          // 12: analysis.RegressionResult.Coefficient
}
var file_proto_analysis_proto_depIdxs = []int32{
	2,  // 0: analysis.AnalysisResponse.descriptives:type_name -> analysis.DescriptiveStatistics
	3,  // 1: analysis.AnalysisResponse.normality_tests:type_name -> analysis.NormalityTestResult
	4,  // 2: analysis.AnalysisResponse.confidence_intervals:type_name -> analysis.ConfidenceInterval
	5,  // 3: analysis.AnalysisResponse.hypothesis_tests:type_name -> analysis.HypothesisTestResult
	6,  // 4: analysis.AnalysisResponse.chi_square_test:type_name -> analysis.PearsonChiSquareTestResult
	7,  // 5: analysis.AnalysisResponse.correlation:type_name -> analysis.CorrelationResult
	8,  // 6: analysis.AnalysisResponse.regression:type_name -> analysis.RegressionResult
	9,  // 7: analysis.AnalysisResponse.binomial_estimate:type_name -> analysis.BinomialEstimate
	10, // 8: analysis.CorrelationResult.pearson:type_name -> analysis.CorrelationResult.PearsonCorrelation
	11, // 9: analysis.CorrelationResult.spearman:type_name -> analysis.CorrelationResult.SpearmanCorrelation
	12, // 10: analysis.RegressionResult.coefficients:type_name -> analysis.RegressionResult.Coefficient
	0,  // 11: analysis.AnalysisService.AnalyzeData:input_type -> analysis.AnalysisRequest
	1,  // 12: analysis.AnalysisService.AnalyzeData:output_type -> analysis.AnalysisResponse
	12, // [12:13] is the sub-list for method output_type
	11, // [11:12] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_proto_analysis_proto_init() }
func file_proto_analysis_proto_init() {
	if File_proto_analysis_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_analysis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_analysis_proto_goTypes,
		DependencyIndexes: file_proto_analysis_proto_depIdxs,
		MessageInfos:      file_proto_analysis_proto_msgTypes,
	}.Build()
	File_proto_analysis_proto = out.File
	file_proto_analysis_proto_rawDesc = nil
	file_proto_analysis_proto_goTypes = nil
	file_proto_analysis_proto_depIdxs = nil
}
