// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v6.30.1
// source: proto/analysis.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnalysisRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	FileContent      []byte                 `protobuf:"bytes,1,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
	FileName         string                 `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	SelectedAnalyses []string               `protobuf:"bytes,3,rep,name=selected_analyses,json=selectedAnalyses,proto3" json:"selected_analyses,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AnalysisRequest) Reset() {
	*x = AnalysisRequest{}
	mi := &file_proto_analysis_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalysisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisRequest) ProtoMessage() {}

func (x *AnalysisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisRequest.ProtoReflect.Descriptor instead.
func (*AnalysisRequest) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{0}
}

func (x *AnalysisRequest) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

func (x *AnalysisRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *AnalysisRequest) GetSelectedAnalyses() []string {
	if x != nil {
		return x.SelectedAnalyses
	}
	return nil
}

// Основной ответ анализа данных со структурированными подразделами
type AnalyzeDataResponse struct {
	state              protoimpl.MessageState         `protogen:"open.v1"`
	DescriptiveStats   *DescriptiveStatisticsResponse `protobuf:"bytes,1,opt,name=descriptive_stats,json=descriptiveStats,proto3" json:"descriptive_stats,omitempty"`
	NormalityTests     *NormalityTestsResponse        `protobuf:"bytes,2,opt,name=normality_tests,json=normalityTests,proto3" json:"normality_tests,omitempty"`
	RegressionAnalysis *RegressionAnalysisResponse    `protobuf:"bytes,3,opt,name=regression_analysis,json=regressionAnalysis,proto3" json:"regression_analysis,omitempty"`
	ProcessingLog      []string                       `protobuf:"bytes,4,rep,name=processing_log,json=processingLog,proto3" json:"processing_log,omitempty"`
	Error              *ErrorDetails                  `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AnalyzeDataResponse) Reset() {
	*x = AnalyzeDataResponse{}
	mi := &file_proto_analysis_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeDataResponse) ProtoMessage() {}

func (x *AnalyzeDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeDataResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeDataResponse) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{1}
}

func (x *AnalyzeDataResponse) GetDescriptiveStats() *DescriptiveStatisticsResponse {
	if x != nil {
		return x.DescriptiveStats
	}
	return nil
}

func (x *AnalyzeDataResponse) GetNormalityTests() *NormalityTestsResponse {
	if x != nil {
		return x.NormalityTests
	}
	return nil
}

func (x *AnalyzeDataResponse) GetRegressionAnalysis() *RegressionAnalysisResponse {
	if x != nil {
		return x.RegressionAnalysis
	}
	return nil
}

func (x *AnalyzeDataResponse) GetProcessingLog() []string {
	if x != nil {
		return x.ProcessingLog
	}
	return nil
}

func (x *AnalyzeDataResponse) GetError() *ErrorDetails {
	if x != nil {
		return x.Error
	}
	return nil
}

// Ошибка, которая может возникнуть при анализе данных
type ErrorDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`       // Код ошибки
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // Сообщение об ошибке
	Details       []string               `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"` // Дополнительные детали (например, стек вызовов)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorDetails) Reset() {
	*x = ErrorDetails{}
	mi := &file_proto_analysis_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetails) ProtoMessage() {}

func (x *ErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetails.ProtoReflect.Descriptor instead.
func (*ErrorDetails) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{2}
}

func (x *ErrorDetails) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ErrorDetails) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorDetails) GetDetails() []string {
	if x != nil {
		return x.Details
	}
	return nil
}

// ------------------ Описательные статистики ------------------
type DescriptiveStatisticsResponse struct {
	state               protoimpl.MessageState   `protogen:"open.v1"`
	Descriptives        []*DescriptiveStatistics `protobuf:"bytes,1,rep,name=descriptives,proto3" json:"descriptives,omitempty"`
	Histograms          []*HistogramData         `protobuf:"bytes,2,rep,name=histograms,proto3" json:"histograms,omitempty"`
	ConfidenceIntervals []*ConfidenceInterval    `protobuf:"bytes,4,rep,name=confidence_intervals,json=confidenceIntervals,proto3" json:"confidence_intervals,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DescriptiveStatisticsResponse) Reset() {
	*x = DescriptiveStatisticsResponse{}
	mi := &file_proto_analysis_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescriptiveStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescriptiveStatisticsResponse) ProtoMessage() {}

func (x *DescriptiveStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescriptiveStatisticsResponse.ProtoReflect.Descriptor instead.
func (*DescriptiveStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{3}
}

func (x *DescriptiveStatisticsResponse) GetDescriptives() []*DescriptiveStatistics {
	if x != nil {
		return x.Descriptives
	}
	return nil
}

func (x *DescriptiveStatisticsResponse) GetHistograms() []*HistogramData {
	if x != nil {
		return x.Histograms
	}
	return nil
}

func (x *DescriptiveStatisticsResponse) GetConfidenceIntervals() []*ConfidenceInterval {
	if x != nil {
		return x.ConfidenceIntervals
	}
	return nil
}

// Описательные статистики для одной переменной
type DescriptiveStatistics struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	VariableName         string                 `protobuf:"bytes,1,opt,name=variable_name,json=variableName,proto3" json:"variable_name,omitempty"`
	Count                string                 `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty"` // Строка вместо int64 для совместимости
	Mean                 float64                `protobuf:"fixed64,3,opt,name=mean,proto3" json:"mean,omitempty"`
	Median               float64                `protobuf:"fixed64,4,opt,name=median,proto3" json:"median,omitempty"`
	Mode                 []string               `protobuf:"bytes,5,rep,name=mode,proto3" json:"mode,omitempty"` // Строки для совместимости с нечисловыми модами
	Variance             float64                `protobuf:"fixed64,6,opt,name=variance,proto3" json:"variance,omitempty"`
	StdDev               float64                `protobuf:"fixed64,7,opt,name=std_dev,json=stdDev,proto3" json:"std_dev,omitempty"`
	VariationCoefficient float64                `protobuf:"fixed64,8,opt,name=variation_coefficient,json=variationCoefficient,proto3" json:"variation_coefficient,omitempty"`
	Skewness             float64                `protobuf:"fixed64,9,opt,name=skewness,proto3" json:"skewness,omitempty"`
	Kurtosis             float64                `protobuf:"fixed64,10,opt,name=kurtosis,proto3" json:"kurtosis,omitempty"`
	MinValue             float64                `protobuf:"fixed64,11,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue             float64                `protobuf:"fixed64,12,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *DescriptiveStatistics) Reset() {
	*x = DescriptiveStatistics{}
	mi := &file_proto_analysis_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescriptiveStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescriptiveStatistics) ProtoMessage() {}

func (x *DescriptiveStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescriptiveStatistics.ProtoReflect.Descriptor instead.
func (*DescriptiveStatistics) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{4}
}

func (x *DescriptiveStatistics) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

func (x *DescriptiveStatistics) GetCount() string {
	if x != nil {
		return x.Count
	}
	return ""
}

func (x *DescriptiveStatistics) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *DescriptiveStatistics) GetMedian() float64 {
	if x != nil {
		return x.Median
	}
	return 0
}

func (x *DescriptiveStatistics) GetMode() []string {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *DescriptiveStatistics) GetVariance() float64 {
	if x != nil {
		return x.Variance
	}
	return 0
}

func (x *DescriptiveStatistics) GetStdDev() float64 {
	if x != nil {
		return x.StdDev
	}
	return 0
}

func (x *DescriptiveStatistics) GetVariationCoefficient() float64 {
	if x != nil {
		return x.VariationCoefficient
	}
	return 0
}

func (x *DescriptiveStatistics) GetSkewness() float64 {
	if x != nil {
		return x.Skewness
	}
	return 0
}

func (x *DescriptiveStatistics) GetKurtosis() float64 {
	if x != nil {
		return x.Kurtosis
	}
	return 0
}

func (x *DescriptiveStatistics) GetMinValue() float64 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *DescriptiveStatistics) GetMaxValue() float64 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

// Данные гистограммы для построения графика
type HistogramData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ColumnName    string                 `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"` // Изменено с variable_name
	Bins          []float64              `protobuf:"fixed64,2,rep,packed,name=bins,proto3" json:"bins,omitempty"`                      // Границы бинов (N+1 для N бинов)
	Frequencies   []int32                `protobuf:"varint,3,rep,packed,name=frequencies,proto3" json:"frequencies,omitempty"`         // Частоты в каждом бине
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistogramData) Reset() {
	*x = HistogramData{}
	mi := &file_proto_analysis_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistogramData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramData) ProtoMessage() {}

func (x *HistogramData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramData.ProtoReflect.Descriptor instead.
func (*HistogramData) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{5}
}

func (x *HistogramData) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *HistogramData) GetBins() []float64 {
	if x != nil {
		return x.Bins
	}
	return nil
}

func (x *HistogramData) GetFrequencies() []int32 {
	if x != nil {
		return x.Frequencies
	}
	return nil
}

// Доверительные интервалы
type ConfidenceInterval struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ColumnName      string                 `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`                  // Изменено с variable_name
	ConfidenceLevel float64                `protobuf:"fixed64,2,opt,name=confidence_level,json=confidenceLevel,proto3" json:"confidence_level,omitempty"` // например, 0.95 для 95%
	LowerBound      float64                `protobuf:"fixed64,3,opt,name=lower_bound,json=lowerBound,proto3" json:"lower_bound,omitempty"`
	UpperBound      float64                `protobuf:"fixed64,4,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
	Mean            float64                `protobuf:"fixed64,5,opt,name=mean,proto3" json:"mean,omitempty"`                                        // Добавлено для CI
	StandardError   float64                `protobuf:"fixed64,6,opt,name=standard_error,json=standardError,proto3" json:"standard_error,omitempty"` // Добавлено для CI
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ConfidenceInterval) Reset() {
	*x = ConfidenceInterval{}
	mi := &file_proto_analysis_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfidenceInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfidenceInterval) ProtoMessage() {}

func (x *ConfidenceInterval) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfidenceInterval.ProtoReflect.Descriptor instead.
func (*ConfidenceInterval) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{6}
}

func (x *ConfidenceInterval) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *ConfidenceInterval) GetConfidenceLevel() float64 {
	if x != nil {
		return x.ConfidenceLevel
	}
	return 0
}

func (x *ConfidenceInterval) GetLowerBound() float64 {
	if x != nil {
		return x.LowerBound
	}
	return 0
}

func (x *ConfidenceInterval) GetUpperBound() float64 {
	if x != nil {
		return x.UpperBound
	}
	return 0
}

func (x *ConfidenceInterval) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *ConfidenceInterval) GetStandardError() float64 {
	if x != nil {
		return x.StandardError
	}
	return 0
}

// ------------------ Тесты на нормальность ------------------
type NormalityTestsResponse struct {
	state              protoimpl.MessageState    `protogen:"open.v1"`
	ShapiroWilkResults []*NormalityTestResult    `protobuf:"bytes,1,rep,name=shapiro_wilk_results,json=shapiroWilkResults,proto3" json:"shapiro_wilk_results,omitempty"`
	ChiSquareResults   []*PearsonChiSquareResult `protobuf:"bytes,2,rep,name=chi_square_results,json=chiSquareResults,proto3" json:"chi_square_results,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *NormalityTestsResponse) Reset() {
	*x = NormalityTestsResponse{}
	mi := &file_proto_analysis_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NormalityTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalityTestsResponse) ProtoMessage() {}

func (x *NormalityTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalityTestsResponse.ProtoReflect.Descriptor instead.
func (*NormalityTestsResponse) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{7}
}

func (x *NormalityTestsResponse) GetShapiroWilkResults() []*NormalityTestResult {
	if x != nil {
		return x.ShapiroWilkResults
	}
	return nil
}

func (x *NormalityTestsResponse) GetChiSquareResults() []*PearsonChiSquareResult {
	if x != nil {
		return x.ChiSquareResults
	}
	return nil
}

// Результаты теста на нормальность (например, Shapiro-Wilk)
type NormalityTestResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ColumnName    string                 `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"` // Изменено с variable_name
	TestName      string                 `protobuf:"bytes,2,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`       // например, "Shapiro-Wilk"
	Statistic     float64                `protobuf:"fixed64,3,opt,name=statistic,proto3" json:"statistic,omitempty"`
	PValue        float64                `protobuf:"fixed64,4,opt,name=p_value,json=pValue,proto3" json:"p_value,omitempty"`
	IsNormal      bool                   `protobuf:"varint,5,opt,name=is_normal,json=isNormal,proto3" json:"is_normal,omitempty"` // Возвращаем тег на 5
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NormalityTestResult) Reset() {
	*x = NormalityTestResult{}
	mi := &file_proto_analysis_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NormalityTestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalityTestResult) ProtoMessage() {}

func (x *NormalityTestResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalityTestResult.ProtoReflect.Descriptor instead.
func (*NormalityTestResult) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{8}
}

func (x *NormalityTestResult) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *NormalityTestResult) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *NormalityTestResult) GetStatistic() float64 {
	if x != nil {
		return x.Statistic
	}
	return 0
}

func (x *NormalityTestResult) GetPValue() float64 {
	if x != nil {
		return x.PValue
	}
	return 0
}

func (x *NormalityTestResult) GetIsNormal() bool {
	if x != nil {
		return x.IsNormal
	}
	return false
}

// Результаты теста хи-квадрат на соответствие распределению
type PearsonChiSquareResult struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ColumnName       string                 `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"` // Изменено с variable_name
	Statistic        float64                `protobuf:"fixed64,2,opt,name=statistic,proto3" json:"statistic,omitempty"`
	PValue           float64                `protobuf:"fixed64,3,opt,name=p_value,json=pValue,proto3" json:"p_value,omitempty"`
	DegreesOfFreedom int32                  `protobuf:"varint,4,opt,name=degrees_of_freedom,json=degreesOfFreedom,proto3" json:"degrees_of_freedom,omitempty"`
	Intervals        int32                  `protobuf:"varint,5,opt,name=intervals,proto3" json:"intervals,omitempty"`               // Добавлено: количество интервалов
	IsNormal         bool                   `protobuf:"varint,6,opt,name=is_normal,json=isNormal,proto3" json:"is_normal,omitempty"` // Добавлено: вывод теста
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PearsonChiSquareResult) Reset() {
	*x = PearsonChiSquareResult{}
	mi := &file_proto_analysis_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PearsonChiSquareResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PearsonChiSquareResult) ProtoMessage() {}

func (x *PearsonChiSquareResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PearsonChiSquareResult.ProtoReflect.Descriptor instead.
func (*PearsonChiSquareResult) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{9}
}

func (x *PearsonChiSquareResult) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *PearsonChiSquareResult) GetStatistic() float64 {
	if x != nil {
		return x.Statistic
	}
	return 0
}

func (x *PearsonChiSquareResult) GetPValue() float64 {
	if x != nil {
		return x.PValue
	}
	return 0
}

func (x *PearsonChiSquareResult) GetDegreesOfFreedom() int32 {
	if x != nil {
		return x.DegreesOfFreedom
	}
	return 0
}

func (x *PearsonChiSquareResult) GetIntervals() int32 {
	if x != nil {
		return x.Intervals
	}
	return 0
}

func (x *PearsonChiSquareResult) GetIsNormal() bool {
	if x != nil {
		return x.IsNormal
	}
	return false
}

// ------------------ Регрессионный анализ ------------------
type RegressionAnalysisResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	DependentVariable    string                 `protobuf:"bytes,1,opt,name=dependent_variable,json=dependentVariable,proto3" json:"dependent_variable,omitempty"`
	IndependentVariables []string               `protobuf:"bytes,2,rep,name=independent_variables,json=independentVariables,proto3" json:"independent_variables,omitempty"`
	DataPoints           []*DataPoint           `protobuf:"bytes,3,rep,name=data_points,json=dataPoints,proto3" json:"data_points,omitempty"` // Точки данных для построения графика
	Models               []*RegressionModel     `protobuf:"bytes,4,rep,name=models,proto3" json:"models,omitempty"`                           // Несколько моделей регрессии
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RegressionAnalysisResponse) Reset() {
	*x = RegressionAnalysisResponse{}
	mi := &file_proto_analysis_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegressionAnalysisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegressionAnalysisResponse) ProtoMessage() {}

func (x *RegressionAnalysisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegressionAnalysisResponse.ProtoReflect.Descriptor instead.
func (*RegressionAnalysisResponse) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{10}
}

func (x *RegressionAnalysisResponse) GetDependentVariable() string {
	if x != nil {
		return x.DependentVariable
	}
	return ""
}

func (x *RegressionAnalysisResponse) GetIndependentVariables() []string {
	if x != nil {
		return x.IndependentVariables
	}
	return nil
}

func (x *RegressionAnalysisResponse) GetDataPoints() []*DataPoint {
	if x != nil {
		return x.DataPoints
	}
	return nil
}

func (x *RegressionAnalysisResponse) GetModels() []*RegressionModel {
	if x != nil {
		return x.Models
	}
	return nil
}

// Модель регрессии
type RegressionModel struct {
	state             protoimpl.MessageState   `protogen:"open.v1"`
	RegressionType    string                   `protobuf:"bytes,1,opt,name=regression_type,json=regressionType,proto3" json:"regression_type,omitempty"` // например, "Linear", "Power", "Logarithmic", etc.
	RSquared          float64                  `protobuf:"fixed64,2,opt,name=r_squared,json=rSquared,proto3" json:"r_squared,omitempty"`
	AdjustedRSquared  float64                  `protobuf:"fixed64,3,opt,name=adjusted_r_squared,json=adjustedRSquared,proto3" json:"adjusted_r_squared,omitempty"`
	FStatistic        float64                  `protobuf:"fixed64,4,opt,name=f_statistic,json=fStatistic,proto3" json:"f_statistic,omitempty"`
	ProbFStatistic    float64                  `protobuf:"fixed64,5,opt,name=prob_f_statistic,json=probFStatistic,proto3" json:"prob_f_statistic,omitempty"`
	Sse               float64                  `protobuf:"fixed64,6,opt,name=sse,proto3" json:"sse,omitempty"` // Sum of Squared Errors
	Coefficients      []*RegressionCoefficient `protobuf:"bytes,7,rep,name=coefficients,proto3" json:"coefficients,omitempty"`
	Residuals         []float64                `protobuf:"fixed64,8,rep,packed,name=residuals,proto3" json:"residuals,omitempty"`                                 // Остатки регрессии для проверки на нормальность
	ResidualsAnalysis *ResidualsAnalysisResult `protobuf:"bytes,9,opt,name=residuals_analysis,json=residualsAnalysis,proto3" json:"residuals_analysis,omitempty"` // Результаты анализа остатков
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RegressionModel) Reset() {
	*x = RegressionModel{}
	mi := &file_proto_analysis_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegressionModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegressionModel) ProtoMessage() {}

func (x *RegressionModel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegressionModel.ProtoReflect.Descriptor instead.
func (*RegressionModel) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{11}
}

func (x *RegressionModel) GetRegressionType() string {
	if x != nil {
		return x.RegressionType
	}
	return ""
}

func (x *RegressionModel) GetRSquared() float64 {
	if x != nil {
		return x.RSquared
	}
	return 0
}

func (x *RegressionModel) GetAdjustedRSquared() float64 {
	if x != nil {
		return x.AdjustedRSquared
	}
	return 0
}

func (x *RegressionModel) GetFStatistic() float64 {
	if x != nil {
		return x.FStatistic
	}
	return 0
}

func (x *RegressionModel) GetProbFStatistic() float64 {
	if x != nil {
		return x.ProbFStatistic
	}
	return 0
}

func (x *RegressionModel) GetSse() float64 {
	if x != nil {
		return x.Sse
	}
	return 0
}

func (x *RegressionModel) GetCoefficients() []*RegressionCoefficient {
	if x != nil {
		return x.Coefficients
	}
	return nil
}

func (x *RegressionModel) GetResiduals() []float64 {
	if x != nil {
		return x.Residuals
	}
	return nil
}

func (x *RegressionModel) GetResidualsAnalysis() *ResidualsAnalysisResult {
	if x != nil {
		return x.ResidualsAnalysis
	}
	return nil
}

// Коэффициент регрессии
type RegressionCoefficient struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	VariableName            string                 `protobuf:"bytes,1,opt,name=variable_name,json=variableName,proto3" json:"variable_name,omitempty"`
	Coefficient             float64                `protobuf:"fixed64,2,opt,name=coefficient,proto3" json:"coefficient,omitempty"`
	StdError                float64                `protobuf:"fixed64,3,opt,name=std_error,json=stdError,proto3" json:"std_error,omitempty"` // Изменено с standard_error
	TStatistic              float64                `protobuf:"fixed64,4,opt,name=t_statistic,json=tStatistic,proto3" json:"t_statistic,omitempty"`
	PValue                  float64                `protobuf:"fixed64,5,opt,name=p_value,json=pValue,proto3" json:"p_value,omitempty"`
	ConfidenceIntervalLower float64                `protobuf:"fixed64,6,opt,name=confidence_interval_lower,json=confidenceIntervalLower,proto3" json:"confidence_interval_lower,omitempty"` // Добавлено для CI коэффициентов
	ConfidenceIntervalUpper float64                `protobuf:"fixed64,7,opt,name=confidence_interval_upper,json=confidenceIntervalUpper,proto3" json:"confidence_interval_upper,omitempty"` // Добавлено для CI коэффициентов
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *RegressionCoefficient) Reset() {
	*x = RegressionCoefficient{}
	mi := &file_proto_analysis_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegressionCoefficient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegressionCoefficient) ProtoMessage() {}

func (x *RegressionCoefficient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegressionCoefficient.ProtoReflect.Descriptor instead.
func (*RegressionCoefficient) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{12}
}

func (x *RegressionCoefficient) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

func (x *RegressionCoefficient) GetCoefficient() float64 {
	if x != nil {
		return x.Coefficient
	}
	return 0
}

func (x *RegressionCoefficient) GetStdError() float64 {
	if x != nil {
		return x.StdError
	}
	return 0
}

func (x *RegressionCoefficient) GetTStatistic() float64 {
	if x != nil {
		return x.TStatistic
	}
	return 0
}

func (x *RegressionCoefficient) GetPValue() float64 {
	if x != nil {
		return x.PValue
	}
	return 0
}

func (x *RegressionCoefficient) GetConfidenceIntervalLower() float64 {
	if x != nil {
		return x.ConfidenceIntervalLower
	}
	return 0
}

func (x *RegressionCoefficient) GetConfidenceIntervalUpper() float64 {
	if x != nil {
		return x.ConfidenceIntervalUpper
	}
	return 0
}

// Точка данных для графика регрессии
type DataPoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float64                `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             float64                `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataPoint) Reset() {
	*x = DataPoint{}
	mi := &file_proto_analysis_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPoint) ProtoMessage() {}

func (x *DataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPoint.ProtoReflect.Descriptor instead.
func (*DataPoint) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{13}
}

func (x *DataPoint) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *DataPoint) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

// Результаты анализа остатков регрессии
type ResidualsAnalysisResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShapiroTest   *NormalityTestResult   `protobuf:"bytes,1,opt,name=shapiro_test,json=shapiroTest,proto3" json:"shapiro_test,omitempty"` // Результат теста Шапиро-Уилка
	Histogram     *HistogramData         `protobuf:"bytes,2,opt,name=histogram,proto3" json:"histogram,omitempty"`                        // Гистограмма остатков
	QqPlot        *QQPlotData            `protobuf:"bytes,3,opt,name=qq_plot,json=qqPlot,proto3" json:"qq_plot,omitempty"`                // Данные для QQ-графика
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResidualsAnalysisResult) Reset() {
	*x = ResidualsAnalysisResult{}
	mi := &file_proto_analysis_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResidualsAnalysisResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResidualsAnalysisResult) ProtoMessage() {}

func (x *ResidualsAnalysisResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResidualsAnalysisResult.ProtoReflect.Descriptor instead.
func (*ResidualsAnalysisResult) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{14}
}

func (x *ResidualsAnalysisResult) GetShapiroTest() *NormalityTestResult {
	if x != nil {
		return x.ShapiroTest
	}
	return nil
}

func (x *ResidualsAnalysisResult) GetHistogram() *HistogramData {
	if x != nil {
		return x.Histogram
	}
	return nil
}

func (x *ResidualsAnalysisResult) GetQqPlot() *QQPlotData {
	if x != nil {
		return x.QqPlot
	}
	return nil
}

// Данные для QQ-графика
type QQPlotData struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TheoreticalQuantiles []float64              `protobuf:"fixed64,1,rep,packed,name=theoretical_quantiles,json=theoreticalQuantiles,proto3" json:"theoretical_quantiles,omitempty"` // Теоретические квантили
	SampleQuantiles      []float64              `protobuf:"fixed64,2,rep,packed,name=sample_quantiles,json=sampleQuantiles,proto3" json:"sample_quantiles,omitempty"`                // Эмпирические квантили
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *QQPlotData) Reset() {
	*x = QQPlotData{}
	mi := &file_proto_analysis_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QQPlotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQPlotData) ProtoMessage() {}

func (x *QQPlotData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analysis_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQPlotData.ProtoReflect.Descriptor instead.
func (*QQPlotData) Descriptor() ([]byte, []int) {
	return file_proto_analysis_proto_rawDescGZIP(), []int{15}
}

func (x *QQPlotData) GetTheoreticalQuantiles() []float64 {
	if x != nil {
		return x.TheoreticalQuantiles
	}
	return nil
}

func (x *QQPlotData) GetSampleQuantiles() []float64 {
	if x != nil {
		return x.SampleQuantiles
	}
	return nil
}

var File_proto_analysis_proto protoreflect.FileDescriptor

var file_proto_analysis_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x22, 0x7e, 0x0a, 0x0f, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x73,
	0x22, 0xe2, 0x02, 0x0a, 0x13, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x49,
	0x0a, 0x0f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x13, 0x72, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x12, 0x72, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x6f, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x67, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x56, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xee, 0x01,
	0x0a, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4f, 0x0a,
	0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x22, 0xee,
	0x02, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x73, 0x74, 0x64, 0x44, 0x65, 0x76, 0x12, 0x33, 0x0a, 0x15, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x6b, 0x65, 0x77, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x73, 0x6b, 0x65, 0x77, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x75, 0x72,
	0x74, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x72,
	0x74, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x66, 0x0a, 0x0d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52,
	0x04, 0x62, 0x69, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x65, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb9, 0x01, 0x0a, 0x16, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x14, 0x73, 0x68, 0x61, 0x70, 0x69, 0x72, 0x6f, 0x5f, 0x77, 0x69,
	0x6c, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x12, 0x73, 0x68, 0x61, 0x70, 0x69, 0x72, 0x6f, 0x57, 0x69, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x63, 0x68, 0x69, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x65, 0x61, 0x72, 0x73,
	0x6f, 0x6e, 0x43, 0x68, 0x69, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x10, 0x63, 0x68, 0x69, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x22, 0xd9, 0x01,
	0x0a, 0x16, 0x50, 0x65, 0x61, 0x72, 0x73, 0x6f, 0x6e, 0x43, 0x68, 0x69, 0x53, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x66,
	0x72, 0x65, 0x65, 0x64, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x65,
	0x67, 0x72, 0x65, 0x65, 0x73, 0x4f, 0x66, 0x46, 0x72, 0x65, 0x65, 0x64, 0x6f, 0x6d, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x22, 0xe9, 0x01, 0x0a, 0x1a, 0x52, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x69, 0x6e, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0x97, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x5f, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x52, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x66, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x62, 0x5f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x62, 0x46, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x73, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x6f,
	0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x0c, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x01, 0x52, 0x09, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x50, 0x0a,
	0x12, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x73, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x73, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x72, 0x65,
	0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22,
	0xad, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x55, 0x70, 0x70, 0x65, 0x72, 0x22,
	0x27, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x22, 0xc1, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73,
	0x69, 0x64, 0x75, 0x61, 0x6c, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x70, 0x69, 0x72, 0x6f, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x70, 0x69,
	0x72, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x2d, 0x0a,
	0x07, 0x71, 0x71, 0x5f, 0x70, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x51, 0x51, 0x50, 0x6c, 0x6f, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x71, 0x71, 0x50, 0x6c, 0x6f, 0x74, 0x22, 0x6c, 0x0a, 0x0a,
	0x51, 0x51, 0x50, 0x6c, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x15, 0x74, 0x68,
	0x65, 0x6f, 0x72, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x14, 0x74, 0x68, 0x65, 0x6f, 0x72,
	0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x32, 0x5a, 0x0a, 0x0f, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a,
	0x0b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x17, 0x5a, 0x15, 0x2e, 0x2f, 0x67, 0x6f, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_analysis_proto_rawDescOnce sync.Once
	file_proto_analysis_proto_rawDescData = file_proto_analysis_proto_rawDesc
)

func file_proto_analysis_proto_rawDescGZIP() []byte {
	file_proto_analysis_proto_rawDescOnce.Do(func() {
		file_proto_analysis_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_analysis_proto_rawDescData)
	})
	return file_proto_analysis_proto_rawDescData
}

var file_proto_analysis_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_proto_analysis_proto_goTypes = []any{
	(*AnalysisRequest)(nil),               // 0: analysis.AnalysisRequest
	(*AnalyzeDataResponse)(nil),           // 1: analysis.AnalyzeDataResponse
	(*ErrorDetails)(nil),                  // 2: analysis.ErrorDetails
	(*DescriptiveStatisticsResponse)(nil), // 3: analysis.DescriptiveStatisticsResponse
	(*DescriptiveStatistics)(nil),         // 4: analysis.DescriptiveStatistics
	(*HistogramData)(nil),                 // 5: analysis.HistogramData
	(*ConfidenceInterval)(nil),            // 6: analysis.ConfidenceInterval
	(*NormalityTestsResponse)(nil),        // 7: analysis.NormalityTestsResponse
	(*NormalityTestResult)(nil),           // 8: analysis.NormalityTestResult
	(*PearsonChiSquareResult)(nil),        // 9: analysis.PearsonChiSquareResult
	(*RegressionAnalysisResponse)(nil),    // 10: analysis.RegressionAnalysisResponse
	(*RegressionModel)(nil),               // 11: analysis.RegressionModel
	(*RegressionCoefficient)(nil),         // 12: analysis.RegressionCoefficient
	(*DataPoint)(nil),                     // 13: analysis.DataPoint
	(*ResidualsAnalysisResult)(nil),       // 14: analysis.ResidualsAnalysisResult
	(*QQPlotData)(nil),                    // 15: analysis.QQPlotData
}
var file_proto_analysis_proto_depIdxs = []int32{
	3,  // 0: analysis.AnalyzeDataResponse.descriptive_stats:type_name -> analysis.DescriptiveStatisticsResponse
	7,  // 1: analysis.AnalyzeDataResponse.normality_tests:type_name -> analysis.NormalityTestsResponse
	10, // 2: analysis.AnalyzeDataResponse.regression_analysis:type_name -> analysis.RegressionAnalysisResponse
	2,  // 3: analysis.AnalyzeDataResponse.error:type_name -> analysis.ErrorDetails
	4,  // 4: analysis.DescriptiveStatisticsResponse.descriptives:type_name -> analysis.DescriptiveStatistics
	5,  // 5: analysis.DescriptiveStatisticsResponse.histograms:type_name -> analysis.HistogramData
	6,  // 6: analysis.DescriptiveStatisticsResponse.confidence_intervals:type_name -> analysis.ConfidenceInterval
	8,  // 7: analysis.NormalityTestsResponse.shapiro_wilk_results:type_name -> analysis.NormalityTestResult
	9,  // 8: analysis.NormalityTestsResponse.chi_square_results:type_name -> analysis.PearsonChiSquareResult
	13, // 9: analysis.RegressionAnalysisResponse.data_points:type_name -> analysis.DataPoint
	11, // 10: analysis.RegressionAnalysisResponse.models:type_name -> analysis.RegressionModel
	12, // 11: analysis.RegressionModel.coefficients:type_name -> analysis.RegressionCoefficient
	14, // 12: analysis.RegressionModel.residuals_analysis:type_name -> analysis.ResidualsAnalysisResult
	8,  // 13: analysis.ResidualsAnalysisResult.shapiro_test:type_name -> analysis.NormalityTestResult
	5,  // 14: analysis.ResidualsAnalysisResult.histogram:type_name -> analysis.HistogramData
	15, // 15: analysis.ResidualsAnalysisResult.qq_plot:type_name -> analysis.QQPlotData
	0,  // 16: analysis.AnalysisService.AnalyzeData:input_type -> analysis.AnalysisRequest
	1,  // 17: analysis.AnalysisService.AnalyzeData:output_type -> analysis.AnalyzeDataResponse
	17, // [17:18] is the sub-list for method output_type
	16, // [16:17] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_proto_analysis_proto_init() }
func file_proto_analysis_proto_init() {
	if File_proto_analysis_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_analysis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_analysis_proto_goTypes,
		DependencyIndexes: file_proto_analysis_proto_depIdxs,
		MessageInfos:      file_proto_analysis_proto_msgTypes,
	}.Build()
	File_proto_analysis_proto = out.File
	file_proto_analysis_proto_rawDesc = nil
	file_proto_analysis_proto_goTypes = nil
	file_proto_analysis_proto_depIdxs = nil
}
